/*描述
V先生有一天工作到很晚，回家的时候要穿过一条长l的笔直的街道，这条街道上有n个路灯。假设
这条街起点为0，终点为l，第i个路灯坐标为ai。路灯发光能力以正数d来衡量，其中d表示路灯能
够照亮的街道上的点与路灯的最远距离，所有路灯发光能力相同。为了让V先生看清回家的路，路
灯必须照亮整条街道，又为了节省电力希望找到最小的d是多少
样例输入
7 15
15 5 3 7 9 14 0
样例输出
2.50

输入
输入两行数据，第一行是两个整数：路灯数目n (1≤n≤1000)，街道长度l (1?≤l≤109)。第二行有n个
整数ai (0?≤?ai≤?l)，表示路灯坐标，多个路灯可以在同一个点，也可以安放在终点位置。



*/


package test1012;
import java.util.*;

public class Main {
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		while (sc.hasNext()) {
			String[] temp1 = sc.nextLine().split(" ");
			String[] temp2 = sc.nextLine().split(" ");
			ArrayList<Integer> list2 = new ArrayList<Integer>();
			int[] line1 = new int[temp1.length];
			for (int i = 0; i < temp1.length; i++) {
				line1[i] = Integer.parseInt(temp1[i]);
			}
			for (int i = 0; i < temp2.length; i++) {
				list2.add(Integer.parseInt(temp2[i]));
			}
			findMinDistance(list2,line1);
		}
	}
	
	public static void findMinDistance (ArrayList<Integer> list, int[] line1) {
		int len = line1[1];
		Collections.sort(list);
		int maxLen = 0;
		for(int i = 0; i < line1[0]-1; i++) {
			maxLen = (list.get(i+1) - list.get(i)) > maxLen ? (list.get(i+1) - list.get(i)):maxLen;
		}
		int beginLen = list.get(0) - 0;
		int endLen = len - list.get(line1[0]-1);
		if ((double)maxLen/2 > findMax(beginLen,endLen)) {
			System.out.printf("%.2f\n", (double)maxLen/2); return;
		}
		System.out.printf("%.2f\n", (double)findMax(beginLen,endLen));
	} 
	
	public static int findMax(int len1, int len2) {
		return len1 > len2 ? len1 : len2;
	}

}
