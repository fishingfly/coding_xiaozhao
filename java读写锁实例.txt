/*
java 锁机制最大的改进之一就是ReadWriteLock接口和他的唯一实现类ReentranReadWriteLock.
这个类有两个锁，一个是读操作锁，另一个是写操作锁，使用读操作锁时可以允许多个线程同时访问
但是使用写操作锁时只允许一个线程进行。在一个线程执行写操作时，其他线程不能够执行读操作
*/


package testFor1006;

import java.util.*;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

class PriceInfo {
	private double price1;
	private double price2;
	private ReadWriteLock lock;
	
	public PriceInfo() {
		price1 = 1.0;
		price2 = 2.0;
		lock = new ReentrantReadWriteLock();
	}
	
	public double getPrice1() {
		lock.readLock().lock();
		double value = price1;
		lock.readLock().unlock();
		return value;
	}
	
	public double getPrice2() {
		lock.readLock().lock();
		double value = price2;
		lock.readLock().unlock();
		return value;
	}
	
	public void setPrices(double price1, double price2) {
		lock.writeLock().lock();
		this.price1 = price1;
		this.price2 = price2;
		try {
			Thread.sleep(5000);
			System.out.printf("写完了，可以开始读了！！！");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		lock.writeLock().unlock();
	}
}

class Reader implements Runnable {
	private PriceInfo pricesInfo;
	
	public Reader(PriceInfo pricesInfo) {
		this.pricesInfo = pricesInfo;
	}
	
	@Override
	public void run() {
		for (int i=0; i<10; i++) {
			System.out.printf("%s:Price1: %f\n", Thread.currentThread().getName(),pricesInfo.getPrice1());
			System.out.printf("%s:Price2: %f\n", Thread.currentThread().getName(),pricesInfo.getPrice2());
		}
	}
}

class Writer implements Runnable {
	private PriceInfo pricesInfo;
	
	public Writer(PriceInfo pricesInfo) {
		this.pricesInfo = pricesInfo;
	}
	
	@Override
	public void run() {
		for (int i=0; i<3; i++) {
			System.out.printf("开始写了，我看谁还敢读！！！");
			System.out.printf("WriterL Attempt to modify the prices.\n");
			pricesInfo.setPrices(Math.random()*10, Math.random()*8);
			System.out.printf("Writer: Prices have been modified.\n");
//			try {
//				Thread.sleep(5000);
//				System.out.printf("写完了，可以开始读了！！！");
//			} catch (InterruptedException e) {
//				e.printStackTrace();
//			}
		}
	}
}


public class ReadWriteLockDemo {
	public static void main(String[] args) {
		PriceInfo pricesInfo = new PriceInfo();
		Reader reader[] = new Reader[5];
		Thread threadsReader[] = new Thread[5];
		for (int i=0; i<5; i++) {
			reader[i] = new Reader(pricesInfo);
			threadsReader[i] = new Thread(reader[i]);
		}
		
		Writer writer = new Writer(pricesInfo);
		Thread threadWriter = new Thread(writer);
		for (int j=0; j<5; j++) {
			threadsReader[j].start();
		}
		threadWriter.start();
	}
}
