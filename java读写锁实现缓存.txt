²©¿ÍµØÖ·£ºhttp://blog.csdn.net/u013276277/article/details/78379171
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class CacheDemo {
	private static Map<String, Object> map = new HashMap<String, Object>();
	private static ReadWriteLock rwl = new ReentrantReadWriteLock();
	public static void main(String[] args) {
		
	}
	public static Object get(String id) {
		Object value = null;
		rwl.readLock().lock();
		try {
			value = map.get(id);
			if (value == null) {
				rwl.readLock().unlock();
				rwl.writeLock().lock();
				try {
					if (value == null) {
						value = "aaa";
					}
				} finally {
					rwl.writeLock().unlock();
				}
				rwl.readLock().lock();
			}
		} finally {
			rwl.readLock().unlock();
		}
		return value;
	}
	
	public static void set(String id, Object test) {
		rwl.writeLock().lock();
		try {
			if(map.containsKey(id)) {
				map.remove(id);
				map.put(id, test);
			}
		} finally {
			rwl.writeLock().unlock();
		}
	}
}

